apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "pse.at.swivl"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    buildFeatures {
        viewBinding true
    }
}


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    // View Models and extensions.
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    // listing UI
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    // Unit testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "io.mockk:mockk:1.11.0"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0'
    // Coroutine Testing
    //  androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.9'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation "androidx.test:rules:1.3.0"
    androidTestImplementation 'androidx.test:runner:1.3.0'
    // UI testing
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    def room_version = "2.3.0"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    /**
     * There are 2000+ movies in the JSON file that shouldn't be loaded at once but asynchronously as needed when the user scrolls
     * so for that use case I would have implemented a paginated source on the database using below lib but quality takes time
     * and this goes beyond the expected time limit for a test and becomes much more.I have done this in the past.
     */
    /*  def paging_version = "3.0.0-alpha05"

      implementation "androidx.paging:paging-runtime:$paging_version"*/

    // for networking calls.
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    // for parsing network data.
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    // for logging network calls.
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'

    // for image loading and cache in memory (My own image loading library)
    implementation 'io.pixel.android:pixel:0.0.3-alpha'

}